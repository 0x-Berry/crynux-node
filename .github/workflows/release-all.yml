# Build the binary release version for Mac

name: Release Crynux Node using the tag name

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:
    tags:
      - '*'

env:
  RELEASE_VERSION: 2.5.0
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-the-docker-images:
    strategy:
      matrix:
        blockchain:
          - dymension
          - near
    name: Build the Docker image for ${{ matrix.blockchain }}
    uses: ./.github/workflows/releases/release-docker.yml
    with:
      blockchain: ${{ matrix.blockchain }}

  build-the-mac-binary:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Go 1.21.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build
        run: ./build/macos/build.sh -s "${{ secrets.APPLE_DEVELOPER_IDENTITY }}" -u "${{ secrets.APPLE_USER }}" -p "${{ secrets.APPLE_PASS }}" -t "${{ secrets.APPLE_TEAM_ID }}"

      - name: Upload the artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: mac-app
          path: build/crynux_node/dist/crynux-node-helium-v${{ env.RELEASE_VERSION }}-mac-arm64-signed.dmg

  build-the-windows-binary:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Go 1.21.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Run the build script
        run: ./build/windows/build.ps1

      - id: gdrive
        name: Upload to gdrive
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          service-account-json: ${{ secrets.GOOGLE_DRIVE_GSA_CREDENTIALS_BASE64 }}
          file-path: "build/crynux_node/dist/crynux-node-helium-v${{ env.RELEASE_VERSION }}-windows-x64.zip"
          upload-name: "crynux-node-helium-v${{ env.RELEASE_VERSION }}-windows-x64.zip"
          upload-to-folder-id: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
    outputs:
      google-drive-link-content: ${{ steps.gdrive.outputs.web-content-link }}
      google-drive-link-view: ${{ steps.gdrive.outputs.web-view-link }}

  build-the-linux-binary:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Go 1.21.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Run the build script
        run: ./build/linux-server/build.sh

      - id: gdrive
        name: Upload to gdrive
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          service-account-json: ${{ secrets.GOOGLE_DRIVE_GSA_CREDENTIALS_BASE64 }}
          file-path: "build/crynux_node/dist/crynux-node-helium-v${{ env.RELEASE_VERSION }}-linux-bin-x64.tar.gz"
          upload-name: "crynux-node-helium-v${{ env.RELEASE_VERSION }}-linux-bin-x64.tar.gz"
          upload-to-folder-id: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
    outputs:
      google-drive-link-content: ${{ steps.gdrive.outputs.web-content-link }}
      google-drive-link-view: ${{ steps.gdrive.outputs.web-view-link }}

  publish-release:
    runs-on: ubuntu-22.04
    needs:
      - build-the-linux-binary
      - build-the-windows-binary
      - build-the-mac-binary
    env:
      WINDOWS_DOWNLOAD_LINK: ${{ needs.build-the-windows-binary.outputs.google-drive-link-content }}
      WINDOWS_PREVIEW_LINK: ${{ needs.build-the-windows-binary.outputs.google-drive-link-view }}
      LINUX_DOWNLOAD_LINK: ${{ needs.build-the-linux-binary.outputs.google-drive-link-content }}
      LINUX_PREVIEW_LINK: ${{ needs.build-the-linux-binary.outputs.google-drive-link-view }}

    permissions:
        contents: write
    steps:
      - name: Print the Google Drive links
        run: |
          echo "windows download link: ${{ env.WINDOWS_DOWNLOAD_LINK }}"
          echo "windows preview link: ${{ env.WINDOWS_PREVIEW_LINK }}"
          echo "linux download link: ${{ env.LINUX_DOWNLOAD_LINK }}"
          echo "linux preview link: ${{ env.LINUX_PREVIEW_LINK }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download mac app
        uses: actions/download-artifact@v4
        with:
          name: mac-app

      - name: Print the workspace
        run: |
          ls -l

      - name: Generate the changelog
        run: |
          windows_link_escaped=$(printf '%s\n' "${{ env.WINDOWS_DOWNLOAD_LINK }}" | sed -e 's/[\/&]/\\&/g')
          linux_link_escaped=$(printf '%s\n' "${{ env.LINUX_DOWNLOAD_LINK }}" | sed -e 's/[\/&]/\\&/g')
          sed -i "s/RELEASE_VERSION/${{ env.RELEASE_VERSION }}/g" build/changelog-template.md
          sed -i "s/WINDOWS_LINK/$windows_link_escaped/g" build/changelog-template.md
          sed -i "s/LINUX_SERVER_LINK/$linux_link_escaped/g" build/changelog-template.md

      - id: release
        name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: build/changelog-template.md
          files: crynux-node-helium-v${{ env.RELEASE_VERSION }}-mac-arm64-signed.dmg
    outputs:
      windows-download-link: ${{ env.WINDOWS_DOWNLOAD_LINK }}
      windows-preview-link: ${{ env.WINDOWS_PREVIEW_LINK }}
      linux-download-link: ${{ env.LINUX_DOWNLOAD_LINK }}
      linux-preview-link: ${{ env.LINUX_PREVIEW_LINK }}
      mac-link: ${{ fromJSON(steps.release.outputs.assets)[0].browser_download_url }}

  update-documentation:
    runs-on: ubuntu-22.04
    needs:
      - publish-release
    env:
      WINDOWS_DOWNLOAD_LINK: ${{ needs.publish-release.outputs.windows-download-link }}
      WINDOWS_PREVIEW_LINK: ${{ needs.publish-release.outputs.windows-preview-link }}
      LINUX_DOWNLOAD_LINK: ${{ needs.publish-release.outputs.linux-download-link }}
      LINUX_PREVIEW_LINK: ${{ needs.publish-release.outputs.linux-preview-link }}
      MAC_LINK: ${{ needs.publish-release.outputs.mac-link }}
    steps:
      - name: Dispatch event to the documentation repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository_owner }}/documentation
          event-type: node-released
          client-payload: '{"windows-download-link": "${{ env.WINDOWS_DOWNLOAD_LINK }}", "windows-preview-link": "${{ env.WINDOWS_PREVIEW_LINK }}", "linux-download-link": "${{ env.LINUX_DOWNLOAD_LINK }}", "linux-preview-link": "${{ env.LINUX_PREVIEW_LINK }}", "mac-link": "${{ env.MAC_LINK }}", "release-version": "${{ env.RELEASE_VERSION }}"}'
